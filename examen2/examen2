/*
Segundo Parcial - Examen
Instructor: Ray Brunett Parra Galaviz
Estudiante: Arce Llamas Irvin de Jesus
Clase: 5A
Cuatrimestre: 5
Fecha: 05/07/2024
*/

import { StatusBar } from 'expo-status-bar';
import { Button, StyleSheet, Text, TextInput, View, ScrollView } from 'react-native';
import { initializeApp } from 'firebase/app';
import { getAnalytics } from 'firebase/analytics';
import { useState, useEffect } from 'react';
import { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, onAuthStateChanged, signOut } from 'firebase/auth';

const firebaseConfig = {
  apiKey: "AIzaSyA-diff-key",
  authDomain: "example-app.firebaseapp.com",
  projectId: "example-app",
  storageBucket: "example-app.appspot.com",
  messagingSenderId: "1234567890",
  appId: "1:1234567890:web:abcdef123456",
  measurementId: "G-ABCDEFGH"
};

const app = initializeApp(firebaseConfig);
const analytics = getAnalytics(app);

const LoginForm = ({ email, password, setEmail, setPassword, handleLogin }) => (
  <View style={styles.formContainer}>
    <Text style={styles.header}>Iniciar Sesión</Text>
    <TextInput
      style={styles.textInput}
      value={email}
      onChangeText={setEmail}
      placeholder="Correo"
      autoCapitalize="none"
    />
    <TextInput
      style={styles.textInput}
      value={password}
      onChangeText={setPassword}
      placeholder="Contraseña"
      secureTextEntry
    />
    <View style={styles.buttonWrapper}>
      <Button title="Iniciar Sesión" color="#2196F3" onPress={handleLogin} />
    </View>
  </View>
);

const RegisterForm = ({ email, password, setEmail, setPassword, handleRegister }) => (
  <View style={styles.formContainer}>
    <Text style={styles.header}>Registrarse</Text>
    <TextInput
      style={styles.textInput}
      value={email}
      onChangeText={setEmail}
      placeholder="Correo"
      autoCapitalize="none"
    />
    <TextInput
      style={styles.textInput}
      value={password}
      onChangeText={setPassword}
      placeholder="Contraseña"
      secureTextEntry
    />
    <View style={styles.buttonWrapper}>
      <Button title="Registrarse" color="#2196F3" onPress={handleRegister} />
    </View>
  </View>
);

const AuthenticatedView = ({ user, handleLogout }) => (
  <View style={styles.formContainer}>
    <Text style={styles.header}>Bienvenido</Text>
    <Text style={styles.userEmail}>{user.email}</Text>
    <Button title="Cerrar Sesión" onPress={handleLogout} color="#FF5252" />
  </View>
);

export default function App() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [user, setUser] = useState(null);
  const [isLogin, setIsLogin] = useState(true);

  const auth = getAuth(app);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setUser(user);
    });
    return () => unsubscribe();
  }, [auth]);

  const handleLogin = async () => {
    try {
      await signInWithEmailAndPassword(auth, email, password);
      console.log('Usuario autenticado');
    } catch (error) {
      console.error('Error en autenticación:', error.message);
    }
  };

  const handleRegister = async () => {
    try {
      await createUserWithEmailAndPassword(auth, email, password);
      console.log('Usuario registrado');
    } catch (error) {
      console.error('Error en registro:', error.message);
    }
  };

  const handleLogout = async () => {
    try {
      await signOut(auth);
      console.log('Usuario desconectado');
    } catch (error) {
      console.error('Error en desconexión:', error.message);
    }
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      {user ? (
        <AuthenticatedView user={user} handleLogout={handleLogout} />
      ) : isLogin ? (
        <LoginForm
          email={email}
          setEmail={setEmail}
          password={password}
          setPassword={setPassword}
          handleLogin={handleLogin}
        />
      ) : (
        <RegisterForm
          email={email}
          setEmail={setEmail}
          password={password}
          setPassword={setPassword}
          handleRegister={handleRegister}
        />
      )}
      <View style={styles.toggleWrapper}>
        <Text style={styles.toggleText} onPress={() => setIsLogin(!isLogin)}>
          {isLogin ? '¿Necesitas una cuenta? Regístrate' : '¿Ya tienes cuenta? Inicia Sesión'}
        </Text>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#FAFAFA',
  },
  formContainer: {
    width: '80%',
    maxWidth: 400,
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderRadius: 8,
    elevation: 4,
  },
  header: {
    fontSize: 24,
    marginBottom: 16,
    textAlign: 'center',
  },
  textInput: {
    height: 40,
    borderColor: '#CCCCCC',
    borderWidth: 1,
    marginBottom: 16,
    padding: 8,
    borderRadius: 4,
  },
  buttonWrapper: {
    marginBottom: 16,
  },
  toggleText: {
    color: '#2196F3',
    textAlign: 'center',
  },
  toggleWrapper: {
    marginTop: 20,
  },
  userEmail: {
    fontSize: 18,
    textAlign: 'center',
    marginBottom: 20,
  },
});
